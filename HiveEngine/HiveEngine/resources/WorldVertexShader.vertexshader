#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 vertexNormal_modelspace;

// Output data ; will be interpolated for each fragment.
out float y_worldspace;
out vec2 UV;
out vec3 Normal_worldspace;

// Values that stay constant for the whole mesh.
uniform mat4 WVP;
uniform mat4 W;

void main(){

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  WVP * vec4(vertexPosition_modelspace,1);

	y_worldspace = (W * vec4(vertexPosition_modelspace,1)).y;

	UV = vertexUV;
		
	Normal_worldspace = normalize((W * vec4(vertexNormal_modelspace,0)).xyz);
}
